---
layout: post
title:  "Git It Done"
date:   2017-06-19
categories: git
---  

The amount of times I look these up...  
I have screenshots saved, I have notes...  
Yea, I'll be adding to this list. Until then...


# Switching Branches

`$ git checkout -b branch-name-here`  
 _switches to new branch 'branch-name-here'_

Shortcut for:

`$ git branch branch-name-here`  
`$ git checkout branch-name-here`  

# Using Rebase to Update Branch

```
$ git checkout master
$ git pull
$ git checkout other-branch
$ git rebase master
$ git push origin other-branch -f
```

# When you need to delete a branch

`$ git branch -d the-local-branch` 

# When you want to delete untracked files from working branch  

This one I actually only used once and I'm not exactly sure what was the situation, but I jotted it down nonetheless because, well, you never know. There are two posts I saved regarding this topic-- perhaps, I'll look them over and summarize them here or on a seperate post.  

`$ git clean -n` (will show files that would be deleted)  

`$ git clean -f` (will delete files) 

# When you screw up a git merge 

`$ git reset --hard master@{"300 minutes ago"}` to revert back to a certain period of time... before you screwed up :D

That^ little nugget of wisdom came from [@data_stephanie](https://twitter.com/data_stephanie/status/968226587547258886) on Twitter. *I love Twitter*

# Undo local commit

`$ git reset --hard HEAD^` undo without keeping changes made

`$ git reset --soft HEAD^` undo keeps changes BEFORE commit

# Update

First time using this one was to remove a few deleted files.

`$ git add -u` stages already tracked files, does not add new files

# How do I get out of a `git log` situation?

ready? press `Q` key. Yep.

# Amend most recent commit message, not pushed

`$ git commit --amend` that will open editor or `git commit --amend -m "new commit message here"` straight from terminal.

link below gives more detail and talks of modifying commit message when already pushed.

[more info](https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits#179147)

# So what about `git stash`?

check out the *stash* using `git stash list`

for the latest stash, `git stash apply` and for a non-recent stash... it will look something like `git stash apply stash@{2}` the number will depend on what is displayed when you check out the list and which one of those you want to apply. Note: using no number, it will be assumed it is the latest stash you're looking to apply.

# That time you made some commits and realized you forgot to make an alternate branch so you don't efF your master... */facepalm*

create a new branch, `$ git branch branch-name-here`, from where you've made all the commits, in my case it was master

make sure you're on whatever branch you made the mistake commits too... make sure... are you sure? Ok.

`$ git reset --hard 8abc8ab` the characters after `--hard` will be the commit you'd like to revert to.

This will revert the branch you accidentally commited to back to the point(commit) before the screw up :D
Note: you can use first 7 characters of the commit, they can be forever long

# When you update a readme or something similar through github, but forget to do a git pull and update your local repo and then you go do stuff and go to push, but...
`git pull --rebase` adds your new commit on top, at this point you should see some stuff in your terminal saying to re-push your awesome :D; your github should show commits in the order expected

# When you get "please enter a commit message to explain why this merge is necessary..."
sometimes this happens where an editor will show up that (if you've never seen before) may leave you staring at the screen all 'dafuq-like'.

If you happen to go this route:
 1. press "i"
 2. write your merge message
 3. press "esc"
 4. write ":wq"
 5. then press enter
 
That gem of info (list) came from [this SO post](https://stackoverflow.com/questions/19085807/please-enter-a-commit-message-to-explain-why-this-merge-is-necessary-especially)

# So you wanna re-snag your repo or snag to contribute to one...
Hello `git clone`! Put that into your terminal, at your desired location, and follow it with url that shows up when you click that "clone or download" green button on repo's page. [See this nice post by Github :)](https://help.github.com/en/articles/cloning-a-repository)

Resource: [Forking vs. Cloning repo](https://github.community/t5/Support-Protips/The-difference-between-forking-and-cloning-a-repository/ba-p/1372)

# You add, you commit, you push and then... you realize you need to revert back to a previous commit on your remote repo O_O
```
git reset --hard <commit-hash>
git push -f origin master
```
Note: DO NOT do this if you have a repo with collaborators who may have pulled and started working. At that point it may be best to create a branch with what you want back on there to then be merged into master repo. That way everyone pulls that update *with* their possible additions jazz and things :D

Resource: [Resetting Remote to a Certain Commit](https://stackoverflow.com/questions/5816688/resetting-remote-to-a-certain-commit)

# When you get something like "Your branch and 'origin/master' have diverged, # and have 1 and 1 different commit(s) each, respectively."

[Diverged Branches SO Link](https://stackoverflow.com/questions/2452226/master-branch-and-origin-master-have-diverged-how-to-undiverge-branches) has a few links to look into within the accepted answer.

# Fixed conflicts, but git still complains
 - fix conflict
 - `git add <file>`
 - no commit between add and rebase**
 - `git rebase --continue`
Resource: [After Fixing Conflicts Git Still Complains](https://stackoverflow.com/questions/3611260/after-fixing-conflicts-git-still-complains)
